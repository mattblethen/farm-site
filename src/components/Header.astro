---
const links = [
  { label: "Beef Shares", href: "/beef-shares" },
  { label: "Process", href: "/process" },
  { label: "About", href: "/about" },
  { label: "Gallery", href: "/gallery" },
  { label: "FAQ", href: "/faq" },
  { label: "Contact", href: "/contact" },
];
---
<header class="sticky top-0 z-40 bg-white/90 backdrop-blur border-b border-black/5">
  <div class="mx-auto max-w-[1200px] px-4 md:px-6 py-3 flex items-center justify-between">
    <a href="/" class="font-semibold tracking-tight text-[#1C1C1C] hover:text-[#2F5D46] transition">
      Pine Ridge Beef
    </a>

    <!-- Desktop nav -->
    <nav class="hidden md:flex gap-6 text-sm" aria-label="Primary">
      {links.map((l) => (
        <a href={l.href} class="hover:underline">{l.label}</a>
      ))}
      <a
        href="/reserve"
        class="inline-flex items-center rounded-2xl bg-[#2F5D46] text-white px-3 py-1.5 hover:opacity-90 transition"
      >
        Reserve
      </a>
    </nav>

    <!-- Mobile menu toggle -->
    <button
      class="md:hidden inline-flex items-center justify-center p-2 rounded text-[#2F5D46] hover:bg-[#2F5D46]/10"
      aria-label="Open menu"
      aria-expanded="false"
      aria-controls="mobileMenu"
      type="button"
      data-menu-button
    >
      ☰
    </button>
  </div>

  <!-- Mobile menu drawer (accessible modal) -->
  <div
    id="mobileMenu"
    role="dialog"
    aria-modal="true"
    hidden
    inert
    data-open="false"
    class="md:hidden fixed inset-0 z-50"
  >
    <!-- Backdrop -->
    <div
      data-backdrop
      class="absolute inset-0 bg-black/40 opacity-0 transition-opacity duration-200"
      style="opacity:0"
    ></div>

    <!-- Sheet -->
    <nav
      data-sheet
      aria-label="Mobile"
      class="absolute left-0 right-0 top-0 origin-top rounded-b-2xl bg-white border-b border-black/10 shadow-xl
             translate-y-[-100%] transition-transform duration-300"
      style="transform: translateY(-100%)"
    >
      <div class="px-4 py-3 flex items-center justify-between">
        <span class="font-semibold">Menu</span>
        <button
          type="button"
          aria-label="Close menu"
          data-close
          class="inline-flex items-center justify-center p-2 rounded text-[#2F5D46] hover:bg-[#2F5D46]/10"
        >
          ✕
        </button>
      </div>

      <ul class="px-4 pb-4 pt-1 space-y-2 text-base">
        {links.map((l) => (
          <li>
            <a
              href={l.href}
              class="block px-3 py-2 rounded hover:bg-black/5"
              data-menu-link
            >
              {l.label}
            </a>
          </li>
        ))}
        <li class="pt-1">
          <a
            href="/reserve"
            class="block text-center rounded-2xl bg-[#2F5D46] text-white px-3 py-2 hover:opacity-90"
            data-menu-link
          >
            Reserve
          </a>
        </li>
      </ul>
    </nav>
  </div>

  <!-- Minimal, inline script: accessible toggle + focus trap -->
  <script is:inline>
    (() => {
      const btn = document.querySelector('[data-menu-button]');
      const panel = document.getElementById('mobileMenu');
      if (!btn || !panel) return;

      const backdrop = panel.querySelector('[data-backdrop]');
      const sheet = panel.querySelector('[data-sheet]');
      const closeBtn = panel.querySelector('[data-close]');
      const menuLinks = panel.querySelectorAll('[data-menu-link]');

      const focusablesSelector = 'a[href], button:not([disabled]), input, select, textarea, [tabindex]:not([tabindex="-1"])';
      let lastFocus = null;

      function firstFocusable() {
        return panel.querySelector(focusablesSelector);
      }
      function focusTrap(e) {
        if (e.key !== 'Tab') return;
        const items = [...panel.querySelectorAll(focusablesSelector)]
          .filter(el => !el.hasAttribute('disabled') && el.offsetParent !== null);
        if (!items.length) return;
        const first = items[0];
        const last = items[items.length - 1];
        if (e.shiftKey && document.activeElement === first) {
          e.preventDefault(); last.focus();
        } else if (!e.shiftKey && document.activeElement === last) {
          e.preventDefault(); first.focus();
        }
      }

      const open = () => {
        lastFocus = document.activeElement;
        panel.hidden = false;
        panel.removeAttribute('inert');
        panel.dataset.open = 'true';
        document.body.classList.add('overflow-hidden');
        btn.setAttribute('aria-expanded', 'true');

        requestAnimationFrame(() => {
          if (backdrop) backdrop.style.opacity = '1';
          if (sheet) sheet.style.transform = 'translateY(0)';
        });

        panel.addEventListener('keydown', focusTrap);
        firstFocusable()?.focus();
      };

      const close = () => {
        panel.dataset.open = 'false';
        document.body.classList.remove('overflow-hidden');
        btn.setAttribute('aria-expanded', 'false');

        if (backdrop) backdrop.style.opacity = '0';
        if (sheet) sheet.style.transform = 'translateY(-100%)';

        // wait for transition to finish before hiding/inerting
        const done = () => {
          panel.setAttribute('inert', '');
          panel.hidden = true;
          sheet?.removeEventListener('transitionend', done);
        };
        sheet?.addEventListener('transitionend', done);

        panel.removeEventListener('keydown', focusTrap);
        lastFocus?.focus();
      };

      btn.addEventListener('click', () => {
        const isOpen = panel.dataset.open === 'true';
        isOpen ? close() : open();
      });

      closeBtn?.addEventListener('click', close);
      backdrop?.addEventListener('click', close);
      menuLinks.forEach((a) => a.addEventListener('click', close));

      // ESC to close
      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && panel.dataset.open === 'true') close();
      });
    })();
  </script>
</header>
